<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABKPzcASj83BEo/Nw9KPzcQSj83EEo/NxBKPzcQSj83EEo/NxBKPzcQSj83EEtA
        OAhIPTYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEg9NQBIPTUxRzw0xUc8NM5HPDTNRzw0zUc8NM1HPDTNRzw0zUc8
        NM1HPDTQSD01ZEU6MgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVUg+AFVJPjdTRz3xTUI5/0c8NP9HPDT/Rzw0/0c8
        NP9HPDT/Rzw0/0c8NP9IPTV8RToyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB6a1oAemtaL3prWe11Z1b/YlVI/0k+
        Nv9HPDT/Rzw0/0c8NP9HPDT/Rzw0/0g9NXNGOzMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGOzMARz01AEc8NAlHPDQTRzw0ER8XFgR8bVstfG1b63xt
        W/97bFr/V0tA/0Y7M/9LQDf/SD01/0c8NP9HPDT/SD01Zkc8NAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAExCPgArHwIARzw0fUc8NNVHPDTPRjszs1dL
        QJV7bFrxfG1b/3xtW/9cUET/Sj42/2teT/9fUkX/Rzw0/0c8NPxJPTVTSD00AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALW++wC4wfwMpaz1aZKX7ptZUmfbRjsy/0c8
        NP9GOzT/UUU7/3hqWP99blv/d2lY/1FFO/9cUET/fG1b/3prWf9ZTUH/Rzw09Ek+NTxIPTUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvlIIAwMz/AL/H+FK+yP74q7L3/2Fb
        ef9GOzH/Rzw0/0Y7M/9SRjz/eWpZ/31uXP9lWEr/T0M5/3RlVf99bVv/fW5b/3NlVP9PQzrkRjszJEk+
        NgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArpWCAK+UggCvlIIMrpOALqqNeh2sj3gytKOmvsDH
        9uyxufrxYlx76kY6MehHPDTxRjsz/VVJPv97bFr/d2lY/1FFO/9VSD7/eWpY/3xtW/98bVv/fG1b/2ZZ
        S8g/NS4OS0A3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK+UggCvlIIAr5SCLq6TgbCymIbtu6ST2LWd
        i86vlIN4vsLrLLO7+zZlYYIrRTowJ0c8NDZFOjJuXVFE2HxtW/9wYlL/V0tA/11QRP9hVEf/fG1b/3xt
        W/98bVv/e2xavnZnVgl3aVcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr5SCAK+Ughyuk4HHvKWU/+DV
        y//w6uT/597TzNzOwRPf08cAAAAAAAAAAAAAAAAAWU1BAJeGbgB5almMfG1b/3doV/90ZlX/dWZW/1VI
        Pv92Z1b/fG1b/3xtW/98bVvVfG1bFnxtWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvlIIArpKAZbig
        j//q4tr////+///+/v/18OnM6uDTEu7m2wAAAAAAAAAAAAAAAAB8bVsAfG1bB3xtW7d8bVv/fG1b/31u
        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
        D///gD///8A////Af///wf////n///////8=
</value>
  </data>
</root>